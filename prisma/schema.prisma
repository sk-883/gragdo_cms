// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum AppointmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  role      UserRole @default(USER)
  clinicId  String?
  clinic    Clinic?  @relation(fields: [clinicId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations for created records
  createdAppointments Appointment[] @relation("CreatedBy")
  createdPatients     Patient[]     @relation("CreatedBy")
  createdDoctors      Doctor[]      @relation("CreatedBy")

  @@map("users")
}

model Clinic {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String
  email       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users        User[]
  doctors      Doctor[]
  patients     Patient[]
  appointments Appointment[]
  transactions Transaction[]

  @@map("clinics")
}

model Doctor {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String
  specialization String
  qualification  String?
  experience     Int?     // years of experience
  consultationFee Float?
  isAvailable  Boolean  @default(true)
  clinicId     String
  clinic       Clinic   @relation(fields: [clinicId], references: [id])
  createdById  String
  createdBy    User     @relation("CreatedBy", fields: [createdById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  appointments Appointment[]
  schedules    DoctorSchedule[]

  @@map("doctors")
}

model DoctorSchedule {
  id        String   @id @default(cuid())
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  startTime String   // Format: "09:00"
  endTime   String   // Format: "17:00"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, dayOfWeek])
  @@map("doctor_schedules")
}

model Patient {
  id          String   @id @default(cuid())
  patientId   String   @unique // Custom patient ID like "123456"
  name        String
  email       String?
  phone       String
  gender      Gender
  age         Int
  address     String?
  medicalHistory String?
  allergies   String?
  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])
  createdById String
  createdBy   User     @relation("CreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@map("patients")
}

model Appointment {
  id          String            @id @default(cuid())
  patientId   String
  patient     Patient           @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      Doctor            @relation(fields: [doctorId], references: [id])
  clinicId    String
  clinic      Clinic            @relation(fields: [clinicId], references: [id])
  appointmentDate DateTime
  duration    Int               @default(30) // in minutes
  concern     String
  notes       String?
  status      AppointmentStatus @default(PENDING)
  createdById String
  createdBy   User              @relation("CreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  transactions Transaction[]

  @@map("appointments")
}

model Transaction {
  id            String          @id @default(cuid())
  amount        Float
  type          TransactionType
  description   String
  paymentStatus PaymentStatus   @default(PENDING)
  appointmentId String?
  appointment   Appointment?    @relation(fields: [appointmentId], references: [id])
  clinicId      String
  clinic        Clinic          @relation(fields: [clinicId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("transactions")
}